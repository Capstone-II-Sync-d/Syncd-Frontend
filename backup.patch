diff --git a/.DS_Store b/.DS_Store
index b723684..6bb57af 100644
Binary files a/.DS_Store and b/.DS_Store differ
diff --git a/.gitignore b/.gitignore
index 0fdbaad..6b2e058 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,3 +2,4 @@ node_modules
 .env
 dist/main.*
 .DS_Store
+.DS_Store
diff --git a/src/.DS_Store b/src/.DS_Store
index f1a8341..29cf8e3 100644
Binary files a/src/.DS_Store and b/src/.DS_Store differ
diff --git a/src/components/.DS_Store b/src/components/.DS_Store
index ed6918e..eff3d80 100644
Binary files a/src/components/.DS_Store and b/src/components/.DS_Store differ
diff --git a/src/components/NavBar.jsx b/src/components/NavBar.jsx
index bcd80e8..fc4c84b 100644
--- a/src/components/NavBar.jsx
+++ b/src/components/NavBar.jsx
@@ -5,7 +5,7 @@ import "./NavBarStyles.css";
 
 const NavBar = ({ user, onLogout }) => {
   const [showProfileDropdown, setShowProfileDropdown] = useState(false);
-  const [showNotifications, setShowNotifications] = useState(false);
+  //const [showNotifications, setShowNotifications] = useState(false);
 
   const profileRef = useRef(null);
   const notifRef = useRef(null);
diff --git a/src/components/calendar/CreateEventModal.jsx b/src/components/calendar/CreateEventModal.jsx
index b5c80c9..309ec95 100644
--- a/src/components/calendar/CreateEventModal.jsx
+++ b/src/components/calendar/CreateEventModal.jsx
@@ -1,16 +1,31 @@
 import React, { useState } from "react";
 import "./ModalStyles.css";
 
+const roundToFiveMinutes = (date) => {
+  const rounded = new Date(date);
+  const minutes = rounded.getMinutes();
+  const remainder = minutes % 5;
+
+  if (remainder !== 0) {
+    rounded.setMinutes(minutes - remainder);
+  }
+
+  rounded.setSeconds(0);
+  rounded.setMilliseconds(0);
+  return rounded;
+
+};
+
 const CreateEventModal = ({ selectedDateTime, onClose, onCreate }) => {
   const [formData, setFormData] = useState({
     title: "",
     description: "",
     location: "",
     start: selectedDateTime
-      ? new Date(selectedDateTime.start).toISOString().slice(0, 16)
+      ? roundToFiveMinutes(new Date(selectedDateTime.start)).toISOString().slice(0, 16)
       : "",
     end: selectedDateTime
-      ? new Date(selectedDateTime.end).toISOString().slice(0, 16)
+      ? roundToFiveMinutes(new Date(selectedDateTime.end)).toISOString().slice(0, 16)
       : "",
     public: false,
     isEvent: false,
@@ -18,22 +33,59 @@ const CreateEventModal = ({ selectedDateTime, onClose, onCreate }) => {
 
   const handleInputChange = (e) => {
     const { name, value, type, checked } = e.target;
+   
+
     setFormData((prev) => ({
       ...prev,
       [name]: type === "checkbox" ? checked : value,
     }));
   };
 
+ 
   const handleSubmit = (e) => {
     e.preventDefault();
-    onCreate({
+    const startDate = new Date(formData.start);
+    const endDate = new Date(formData.end);
+
+    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
+      alert("Please enter valid start and end times.");
+      return;
+    }
+    const roundedStart = roundToFiveMinutes(startDate);
+    const roundedEnd = roundToFiveMinutes(endDate);
+     
+     onCreate({
       ...formData,
-      start: new Date(formData.start).toISOString(),
-      end: new Date(formData.end).toISOString(),
+      start: roundedStart.toISOString(),
+      end: roundedEnd.toISOString(),
       published: true, // Regular submit publishes event
     });
   };
 
+  const handleSaveAsDraft = () => {
+    const startDate = new Date(formData.start);
+    const endDate = new Date(formData.end);
+    
+ 
+    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
+      alert("Please enter valid start and end times.");
+      return;
+    }
+    
+    
+    const roundedStart = roundToFiveMinutes(startDate);
+    const roundedEnd = roundToFiveMinutes(endDate);
+    
+    onCreate({
+      ...formData,
+      start: roundedStart.toISOString(),
+      end: roundedEnd.toISOString(),
+      published: false,
+    });
+  };
+
+
+
   return (
     <div className="modal-overlay" onClick={onClose}>
       <div className="modal-content" onClick={(e) => e.stopPropagation()}>
@@ -130,6 +182,8 @@ const CreateEventModal = ({ selectedDateTime, onClose, onCreate }) => {
                 name="start"
                 value={formData.start}
                 onChange={handleInputChange}
+               
+                step="300"
                 required
               />
             </div>
@@ -141,6 +195,8 @@ const CreateEventModal = ({ selectedDateTime, onClose, onCreate }) => {
                 name="end"
                 value={formData.end}
                 onChange={handleInputChange}
+                
+                step="300"
                 required
               />
             </div>
@@ -204,14 +260,7 @@ const CreateEventModal = ({ selectedDateTime, onClose, onCreate }) => {
                 <button
                   type="button"
                   className="btn-secondary"
-                  onClick={() => {
-                    onCreate({
-                      ...formData,
-                      start: new Date(formData.start).toISOString(),
-                      end: new Date(formData.end).toISOString(),
-                      published: false, // Save as draft
-                    });
-                  }}
+                  onClick={handleSaveAsDraft}
                 >
                   Save as Draft
                 </button>
@@ -231,4 +280,4 @@ const CreateEventModal = ({ selectedDateTime, onClose, onCreate }) => {
   );
 };
 
-export default CreateEventModal;
+export default CreateEventModal; 
diff --git a/src/components/calendar/EventDetailModal.jsx b/src/components/calendar/EventDetailModal.jsx
index 255b636..7fd1ffe 100644
--- a/src/components/calendar/EventDetailModal.jsx
+++ b/src/components/calendar/EventDetailModal.jsx
@@ -2,14 +2,24 @@ import React, { useState } from "react";
 import { eventsAPI, calendarAPI } from "./utils/api";
 import "./ModalStyles.css";
 
+const toLocalDateString = (dateString) => {
+  if(!dateString) return "";
+  const date = new Date(dateString);
+  const offset = date.getTimezoneOffset() * 60000;
+  const localTime = new Date(date.getTime() - offset);
+  return localTime.toISOString().slice(0, 16);
+}
+
 const EventDetailModal = ({ event, onClose, onRefresh }) => {
   const [isEditing, setIsEditing] = useState(false);
   const [formData, setFormData] = useState({
     title: event.title || "",
     description: event.description || "",
     location: event.location || "",
-    start: new Date(event.start).toISOString().slice(0, 16),
-    end: new Date(event.end).toISOString().slice(0, 16),
+    start: toLocalDateString(event.start),
+    end: toLocalDateString(event.end),
+    
+    
     public: event.public || false,
   });
 
@@ -28,10 +38,30 @@ const EventDetailModal = ({ event, onClose, onRefresh }) => {
   const handleSubmit = async (e) => {
     e.preventDefault();
     try {
+      const startDate = new Date(formData.start);
+      const endDate = new Date(formData.end);
+
+      const roundToFiveMinutes = (date) => {
+        const rounded = new Date(date);
+        const minutes = rounded.getMinutes();
+        const remainder = minutes % 5;
+
+        if (remainder !== 0) {
+          rounded.setMinutes(minutes - remainder);
+        }
+
+        rounded.setSeconds(0);
+        rounded.setMilliseconds(0);
+        return rounded;
+      }
+
+      const roundedStart = roundToFiveMinutes(startDate);
+      const roundedEnd = roundToFiveMinutes(endDate);
+
       await calendarAPI.updateItem(event.id, {
         ...formData,
-        start: new Date(formData.start).toISOString(),
-        end: new Date(formData.end).toISOString(),
+        start: roundedStart.toISOString(),
+        end: roundedEnd.toISOString(),
       });
 
       await onRefresh();
diff --git a/src/components/calendar/Home.jsx b/src/components/calendar/Home.jsx
index f8a6fdc..9c2bbf6 100644
--- a/src/components/calendar/Home.jsx
+++ b/src/components/calendar/Home.jsx
@@ -15,6 +15,21 @@ import {
 import CreateEventModal from "./CreateEventModal";
 import EventDetailModal from "./EventDetailModal";
 
+const roundToFiveMinutes = (date) => {
+  const rounded  = new Date(date);
+  const minutes = rounded.getMinutes();
+  const remainder = minutes % 5;
+  
+  if (remainder !== 0) {
+    rounded.setMinutes(minutes - remainder);
+  }
+  rounded.setSeconds(0);
+  rounded.setMilliseconds(0);
+
+  console.log(`Rounded ${date.toLocaleTimeString()}) to ${rounded.toLocaleTimeString()}`);
+  return rounded;
+};
+
 const Home = () => {
   // State management
   const [user, setUser] = useState(null);
@@ -26,6 +41,7 @@ const Home = () => {
   const [currentDate, setCurrentDate] = useState(new Date());
   const [calendarKey, setCalendarKey] = useState(0);
 
+
   // Calendar visibility toggles
   const [calendarVisibility, setCalendarVisibility] = useState({
     personal: true,
@@ -134,8 +150,8 @@ const Home = () => {
   const handleSelectDateTime = (selectionInfo) => {
     console.log("Date/time selected:", selectionInfo);
     setSelectedDateTime({
-      start: selectionInfo.start,
-      end: selectionInfo.end,
+      start: roundToFiveMinutes(selectionInfo.start),
+      end: roundToFiveMinutes(selectionInfo.end),
     });
     setShowCreateModal(true);
   };
@@ -190,9 +206,12 @@ const Home = () => {
 
   // Handle create events button click
   const handleCreateEventsClick = () => {
+    console.log("Create Event clicked!");
+    const now = new Date();
+    console.log("Current time:", now.toLocaleTimeString());
     setSelectedDateTime({
-      start: new Date(),
-      end: new Date(Date.now() + 60 * 60 * 1000),
+      start: roundToFiveMinutes(now),
+      end: roundToFiveMinutes(new Date(now.getTime() + 60 * 60 * 1000)),
     });
     setShowCreateModal(true);
   };
diff --git a/src/components/calendar/utils/calendarUtils.js b/src/components/calendar/utils/calendarUtils.js
index a611034..ea2bb24 100644
--- a/src/components/calendar/utils/calendarUtils.js
+++ b/src/components/calendar/utils/calendarUtils.js
@@ -204,6 +204,10 @@ export const getCalendarOptions = () => ({
     dayNames: ["S", "M", "T", "W", "T", "F", "S"],
     hourStart: 0,
     hourEnd: 24,
+    timeGrid: {
+      timeIntervalHeight: 20,
+      timeInterval: 5,
+    },
   },
   month: {
     startDayOfWeek: 0,
